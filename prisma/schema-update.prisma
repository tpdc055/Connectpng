// Add these new models to your existing schema.prisma

// Dynamic Construction Activities (User-defined)
model ConstructionActivity {
  id              String    @id @default(cuid())
  name            String    // e.g., "Line Drain Construction", "Custom Activity"
  description     String?
  color           String    @default("#3b82f6") // Hex color for UI
  isActive        Boolean   @default(true)
  createdBy       String
  createdByUser   User      @relation("CreatedActivities", fields: [createdBy], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  projectActivities ProjectActivity[]
  tasks           Task[]
  gpsPoints       GpsPoint[] @relation("ActivityGpsPoints")

  @@map("construction_activities")
}

// Project-specific activities with assignments
model ProjectActivity {
  id              String              @id @default(cuid())
  projectId       String
  project         Project             @relation(fields: [projectId], references: [id])
  activityId      String
  activity        ConstructionActivity @relation(fields: [activityId], references: [id])

  // Dynamic assignment
  assignedUserId  String?
  assignedUser    User?               @relation("AssignedActivities", fields: [assignedUserId], references: [id])

  // Progress tracking
  status          ActivityStatus      @default(PLANNED)
  progress        Float               @default(0) // 0-100 percentage
  startDate       DateTime?
  estimatedEndDate DateTime?
  actualEndDate   DateTime?

  // Measurements
  totalLength     Float?              // in meters
  completedLength Float?              @default(0)
  estimatedHours  Float?
  actualHours     Float?              @default(0)

  // Metadata
  priority        Priority            @default(MEDIUM)
  notes           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  tasks           Task[]
  activities      ActivityLog[]

  @@unique([projectId, activityId])
  @@map("project_activities")
}

// Dynamic task breakdown
model Task {
  id                String           @id @default(cuid())
  name              String
  description       String?

  // Flexible assignment
  projectActivityId String?
  projectActivity   ProjectActivity? @relation(fields: [projectActivityId], references: [id])
  activityId        String?
  activity          ConstructionActivity? @relation(fields: [activityId], references: [id])

  assignedUserId    String?
  assignedUser      User?            @relation("AssignedTasks", fields: [assignedUserId], references: [id])

  // Progress
  status            TaskStatus       @default(PENDING)
  progress          Float            @default(0) // 0-100 percentage
  priority          Priority         @default(MEDIUM)

  // Time tracking
  estimatedHours    Float?
  actualHours       Float?           @default(0)
  startDate         DateTime?
  dueDate           DateTime?
  completedDate     DateTime?

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("tasks")
}

// Activity logging for real-time updates
model ActivityLog {
  id                String           @id @default(cuid())
  type              String           // "PROGRESS_UPDATE", "STATUS_CHANGE", "ASSIGNMENT", etc.
  description       String

  // Relations
  userId            String
  user              User             @relation("UserActivityLogs", fields: [userId], references: [id])
  projectId         String
  project           Project          @relation("ProjectActivityLogs", fields: [projectId], references: [id])
  projectActivityId String?
  projectActivity   ProjectActivity? @relation(fields: [projectActivityId], references: [id])

  // Data
  oldValue          String?          // JSON string
  newValue          String?          // JSON string
  metadata          String?          // Additional JSON data

  timestamp         DateTime         @default(now())

  @@map("activity_logs")
}

// Update existing User model to include new relations
// Add these relations to your existing User model:
/*
  // New relations to add to User model:
  createdActivities     ConstructionActivity[] @relation("CreatedActivities")
  assignedActivities    ProjectActivity[]      @relation("AssignedActivities")
  assignedTasks         Task[]                 @relation("AssignedTasks")
  activityLogs          ActivityLog[]          @relation("UserActivityLogs")
*/

// Update existing Project model to include new relations
// Add these relations to your existing Project model:
/*
  // New relations to add to Project model:
  projectActivities     ProjectActivity[]
  activityLogs          ActivityLog[]          @relation("ProjectActivityLogs")
*/

// Update existing GpsPoint model
// Add this relation to your existing GpsPoint model:
/*
  // New relation to add to GpsPoint model:
  activityId            String?
  activity              ConstructionActivity?  @relation("ActivityGpsPoints", fields: [activityId], references: [id])
*/

// New Enums
enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
